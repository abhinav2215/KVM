#!/usr/bin/env python

# This is a tool for generating cloud-init configuration drives.
# Tell it the hostname of the target machine, give it a copy of /etc/network/interfaces to be installed on the machine
# and it will do the rest. It will save the resulting ISO image as the filename you specified.
# All that has to be done after this is to present the ISO image in the target VM. This can be done when we boot it from command line or from API.

import os, sys, random, string, tempfile
uuid = os.popen2('uuidgen','r')[1].read()
tempconfig = tempfile.mkstemp(prefix="cloudtmp")
tempname = tempconfig[1]
tempconfig = os.fdopen(tempconfig[0],"w")
hostname = sys.argv[1]
main_ip = sys.argv[2]
gw = '.'.join(main_ip.split(".")[0:3])
#print gw
isoname = sys.argv[3]
rootpw_reset = 'n'
rootpass = ''.join(random.choice(string.ascii_letters + string.digits) for x in range(random.randint(10,14)))

if len(sys.argv) < 3:
    print 'Usage: ./cloudconfig hostname main_ip output.iso [reset root pass?] [keyfile]'
    print 'To add or remove IPs, add or remove them from the interfaces file. This file should be in the same format as /etc/network/interfaces'
    print 'You will need to mount the ISO generated by this script in the target VM and reboot the target for this to take effect.'
try:
    sshkeyfile = sys.argv[4]
except:
    sshkeyfile = "/dev/null"
    if rootpw_reset.lower().startswith('y'): pass
#        print 'Password authentication only. root:'+rootpass
    else: pass
#        print "Password authentication only. No password reset requested."

if not os.path.exists(sshkeyfile):
        print 'SSH key file doesn\'t exist.'
        exit()

def indent_two_spaces(data): # For the interfaces file
        newdata = []
        for line in data.split("\n"):
                line = '  '+line
                newdata.append(line)
        newdata = '\n'.join(newdata)
        return newdata

interfaces='''
auto eth0
iface eth0 inet static
address '''+main_ip+'''
gateway '''+gw+'''.1
netmask 255.255.255.0
dns-nameservers 8.8.8.8
'''
interfaces = interfaces.encode('base64').replace('\r','').replace('\n','')

conf = '''#cloud-config
manage-resolv-conf: true

write_files:
-   encoding: b64
    content: '''+interfaces+'''
    owner: root:root
    path: /etc/network/interfaces.d/eth0
    permissions: '0644'
-   content: nameserver 8.8.8.8
    owner: root:root
    path: /etc/resolv.conf
    permissions: '0644'

hostname: PLACEHOLDER_HOSTNAME
resolv_conf:
  nameservers: ['8.8.8.8','4.2.2.2']
  searchdomains:
    - chinetworks.com
  domain: chinetworks.com
  options:
    rotate: true
    timeout: 1
 '''

mdata='{"instance-id": "'+hostname+'-'+str(random.randint(1,99999))+'",'
mdata += '"hostname":"'+hostname+'", "availability_zone": "nova",'
mdata += '"launch-index":0, "files":[], "meta": { "role":"servers", "essential":"false" },'
mdata += '"uuid":"'+uuid.rstrip()+'"}'

iid = hostname
keydata = open(sshkeyfile,'r').read()

conf = conf.replace("PLACEHOLDER_HOSTNAME", hostname)
conf = conf.replace("PLACEHOLDER_INTERFACES", indent_two_spaces(interfaces))
conf = conf.replace("PLACEHOLDER_KEYS",keydata)
conf = conf.replace("PLACEHOLDER_PASSWORD", rootpass)
tempconfig.write(conf)
tempconfig.close()
os.system("rm -rf /tmp/cloudconfig/"+iid+"/openstack/latest; mkdir -p /tmp/cloudconfig/"+iid+"/openstack/latest")
with open('/tmp/cloudconfig/'+iid+'/openstack/latest/meta_data.json','w') as mfile: mfile.write(mdata)
os.system("mv "+tempname+" /tmp/cloudconfig/"+iid+"/openstack/latest/user_data") # Preparing everything to be added to the ISO image
os.system("`which genisoimage||which mkisofs` -R -V config-2 -o "+isoname+" /tmp/cloudconfig/"+iid+'>/dev/null 2>&1')
os.system("rm -rf /tmp/cloudconfig/"+iid)
#print 'Done! ISO image is at '+isoname+'.'
